import { chromium } from '@playwright/test';
import path from 'path';
import fs from 'fs';

// Define storage state file path
const storageStatePath = path.join(process.cwd(), 'sessionData.json');

// Function to get date from 2 months ago
function getTwoMonthsAgoDate() {
  const date = new Date();
  date.setMonth(date.getMonth() - 2);
  return date;
}

// Function to save data to CSV
async function saveToCSV(data, filename) {
  const csvContent = [
    ['User ID', 'Username', 'Last Message Date', 'URL'],
    ...data.map(item => [item.userId, item.userName, item.lastMessageDate, item.url])
  ].map(row => row.join(',')).join('\n');

  fs.writeFileSync(filename, csvContent);
  console.log(`Data saved to ${filename}`);
}

async function scrollToTargetDate(page, targetDate) {
  let reachedTarget = false;
  let lastHeight = 0;
  let noChangeCount = 0;

  console.log('Scrolling to messages from', targetDate.toDateString());

  while (!reachedTarget) {
    // Get all visible threads
    const threads = await page.$$('div[data-testid="conversation"]');
    const lastThread = threads[threads.length - 1];

    if (lastThread) {
      try {
        // Scroll element into view first
        await lastThread.scrollIntoView();
        await page.waitForTimeout(1000);

        const dateElement = await lastThread.$('div[dir="ltr"] time');
        const dateText = await dateElement.getAttribute('datetime');
        const messageDate = new Date(dateText);

        console.log('Current message date:', messageDate.toLocaleDateString());

        if (messageDate <= targetDate) {
          reachedTarget = true;
          console.log('Found target date!');
          break;
        }
      } catch (error) {
        console.log('Error reading date, continuing scroll...');
      }
    }

    // Scroll with more reliable method
    const currentHeight = await page.evaluate(() => {
      const scrollHeight = document.documentElement.scrollHeight;
      window.scrollTo({
        top: scrollHeight,
        behavior: 'smooth'
      });
      return scrollHeight;
    });

    await page.waitForTimeout(2000); // Wait for content to load

    // Check if we're actually scrolling
    if (currentHeight === lastHeight) {
      noChangeCount++;
      if (noChangeCount >= 3) {
        console.log('No new messages loading, stopping scroll');
        break;
      }
    } else {
      noChangeCount = 0;
    }

    lastHeight = currentHeight;
    
    // Additional wait for network requests
    await page.waitForLoadState('networkidle', { timeout: 5000 }).catch(() => {});
  }
}

async function processConversation(page, conversation) {
  try {
    // Click on the conversation to open it
    await conversation.click();
    await page.waitForTimeout(2000); // Wait for conversation to load

    // Get conversation details
    const details = await page.evaluate(() => {
      const userNameEl = document.querySelector('div[data-testid="conversation"] div[dir="ltr"]');
      const timeEl = document.querySelector('div[data-testid="conversation"] time');
      const userIdMatch = window.location.pathname.match(/messages\/(\d+)/);
      
      return {
        userName: userNameEl ? userNameEl.textContent.trim() : null,
        userId: userIdMatch ? userIdMatch[1] : null,
        lastMessageDate: timeEl ? timeEl.getAttribute('datetime') : null,
        url: window.location.href
      };
    });

    // Go back to messages list
    await page.click('div[aria-label="Back"]');
    await page.waitForTimeout(1000);

    return details;

  } catch (error) {
    console.error('Error processing conversation:', error);
    return null;
  }
}

async function collectMessagesScrollingUp(page, targetDate) {
  const messageData = [];
  let processedIds = new Set();

  console.log('Starting to collect messages...');

  while (true) {
    // Get visible conversations
    const conversations = await page.$$('div[data-testid="conversation"]');

    for (const conversation of conversations) {
      try {
        // Check if already processed
        const conversationId = await conversation.getAttribute('data-conversation-id');
        if (processedIds.has(conversationId)) continue;

        const details = await processConversation(page, conversation);
        if (!details) continue;

        const messageDate = new Date(details.lastMessageDate);
        
        // Check if message is older than target date
        if (messageDate < targetDate) {
          console.log('Found message older than target date, stopping collection');
          return messageData;
        }

        messageData.push({
          userId: details.userId,
          userName: details.userName,
          lastMessageDate: messageDate.toISOString(),
          url: details.url
        });

        processedIds.add(conversationId);
        console.log(`Processed conversation with ${details.userName}`);

      } catch (error) {
        console.log('Error processing conversation:', error.message);
        continue;
      }
    }

    // Scroll up by a small amount
    await page.evaluate(() => {
      window.scrollTo(0, Math.max(0, window.pageYOffset - 300));
    });

    await page.waitForTimeout(1000);

    // Check if we've reached the top
    const isAtTop = await page.evaluate(() => window.pageYOffset === 0);
    if (isAtTop) break;
  }

  return messageData;
}

async function runTwitterBot() {
  let context;
  let browser;

  try {
    browser = await chromium.launch({
      headless: false
    });

    // Check if we have saved storage state
    const hasStorageState = fs.existsSync(storageStatePath);

    // Create context with stored cookies if available
    context = await browser.newContext({
      storageState: hasStorageState ? storageStatePath : undefined
    });

    const page = await context.newPage();

    if (!hasStorageState) {
      console.log('No saved login found. Please login to X...');
      await page.goto('https://x.com/login');

      // Wait for login with extended timeout
      await Promise.race([
        page.waitForURL('https://x.com/home*', { timeout: 120000 }),
        page.waitForURL('https://x.com/?*', { timeout: 120000 }),
        page.waitForURL('https://x.com/i/*', { timeout: 120000 })
      ]).catch(async (error) => {
        if (error.name === 'TimeoutError') {
          console.log('Still waiting for login... Take your time.');
          await page.waitForURL('https://x.com/**/*', { timeout: 120000 });
        }
      });

      // Save storage state after successful login
      await context.storageState({ path: storageStatePath });
      console.log('Login data saved for future use!');
    } else {
      console.log('Using saved login data...');
      await page.goto('https://x.com/home');
    }

    console.log('Navigating to messages...');
    await page.goto('https://x.com/messages');
    await page.waitForLoadState('networkidle', { timeout: 60000 });

    const targetDate = getTwoMonthsAgoDate();
    
    // First scroll down to target date
    await scrollToTargetDate(page, targetDate);
    
    // Then collect messages scrolling up
    const messageData = await collectMessagesScrollingUp(page, targetDate);
    
    // Save to CSV
    const csvFilePath = path.join(process.cwd(), 'message_data.csv');
    await saveToCSV(messageData, csvFilePath);
    
    console.log(`Scraped ${messageData.length} message threads`);
    console.log('Data saved to message_data.csv');
    
    await page.pause();

  } catch (error) {
    console.error('Error occurred:', error.message);
  } finally {
    if (context) await context.close();
    if (browser) await browser.close();
  }
}

runTwitterBot().catch(console.error);




import { chromium } from '@playwright/test';
import path from 'path';
import fs from 'fs';
import { format, subMonths } from 'date-fns';

// Define storage state file path
const storageStatePath = path.join(process.cwd(), 'sessionData.json');
const outputPath = path.join(process.cwd(), 'twitter_messages.json');

// Get date 2 months ago from today
const twoMonthsAgo = subMonths(new Date(), 2);

async function runTwitterBot() {
    let context;
    let browser;

    try {
        browser = await chromium.launch({
            headless: false,
            // slowMo: 50 // Uncomment to slow down actions for debugging
        });

        // Check if we have saved storage state
        const hasStorageState = fs.existsSync(storageStatePath);

        // Create context with stored cookies if available
        context = await browser.newContext({
            storageState: hasStorageState ? storageStatePath : undefined
        });

        const page = await context.newPage();

        if (!hasStorageState) {
            console.log('No saved login found. Please login to X...');
            await page.goto('https://x.com/login');

            // Wait for login with extended timeout
            await Promise.race([
                page.waitForURL('https://x.com/home*', { timeout: 120000 }),
                page.waitForURL('https://x.com/?*', { timeout: 120000 }),
                page.waitForURL('https://x.com/i/*', { timeout: 120000 })
            ]).catch(async (error) => {
                if (error.name === 'TimeoutError') {
                    console.log('Still waiting for login... Take your time.');
                    await page.waitForURL('https://x.com/**/*', { timeout: 120000 });
                }
            });

            // Save storage state after successful login
            await context.storageState({ path: storageStatePath });
            console.log('Login data saved for future use!');
        } else {
            console.log('Using saved login data...');
            await page.goto('https://x.com/home');
        }

        console.log('Navigating to messages...');
        await page.goto('https://x.com/messages');
        await page.waitForLoadState('networkidle', { timeout: 60000 });

        // Get your own Twitter handle
        const myHandle = await page.evaluate(() => {
            const navItems = document.querySelectorAll('[data-testid="AppTabBar_Profile_Link"]');
            for (const item of navItems) {
                const href = item.getAttribute('href');
                if (href && href.startsWith('/')) {
                    return href.substring(1);
                }
            }
            return null;
        });

        console.log(`Your Twitter handle: ${myHandle || 'Could not detect'}`);
        
        // Wait for conversation list to load
        await page.waitForSelector('[data-testid="conversation"]', { timeout: 30000 });
        
        // Extract message data
        const messagesData = await extractMessageData(page, myHandle, twoMonthsAgo);
        
        // Save to JSON file
        fs.writeFileSync(outputPath, JSON.stringify(messagesData, null, 2));
        console.log(`Message data saved to ${outputPath}`);

        console.log('Script finished.');
        await page.pause(); // Keep browser open for inspection

    } catch (error) {
        console.error('Error occurred:', error.message);
    } finally {
        if (context) await context.close();
        if (browser) await browser.close();
    }
}

async function extractMessageData(page, myHandle, cutoffDate) {
    console.log('Extracting message data...');
    
    const messages = [];
    let reachedEnd = false;
    let scrollCount = 0;
    const maxScrolls = 100; // Limit scrolling to prevent infinite loops
    
    // Keep track of conversations we've already processed
    const processedConversations = new Set();
    
    while (!reachedEnd && scrollCount < maxScrolls) {
        // Get current conversation elements
        const conversations = await page.$$('[data-testid="conversation"]');
        console.log(`Found ${conversations.length} conversations on current screen`);
        
        // Process each conversation that we haven't seen yet
        for (const conversation of conversations) {
            // Extract profile ID (handle)
            const profileHandle = await conversation.evaluate(el => {
                const handleElement = el.querySelector('[data-testid="DM_Conversation_Avatar"]');
                if (handleElement) {
                    const href = handleElement.getAttribute('href');
                    return href ? href.substring(1) : null;
                }
                return null;
            });
            
            // Skip if we've already processed this conversation
            if (!profileHandle || processedConversations.has(profileHandle)) {
                continue;
            }
            
            // Extract timestamp
            const timestamp = await conversation.evaluate(el => {
                const timeElement = el.querySelector('time');
                return timeElement ? timeElement.getAttribute('datetime') : null;
            });
            
            if (timestamp) {
                const messageDate = new Date(timestamp);
                
                // Only add if the message is within our date range
                if (messageDate >= cutoffDate) {
                    messages.push({
                        my_id: myHandle || 'unknown',
                        profile_id: profileHandle,
                        last_send_message_date: timestamp
                    });
                    
                    // Mark this conversation as processed
                    processedConversations.add(profileHandle);
                } else {
                    // If we've hit a message older than our cutoff, we might be done
                    console.log('Reached message older than cutoff date');
                    reachedEnd = true;
                    break;
                }
            }
        }
        
        // Scroll down to load more conversations
        await page.evaluate(() => {
            window.scrollBy(0, 800);
        });
        
        // Wait for new content to load
        await page.waitForTimeout(1000);
        
        scrollCount++;
        console.log(`Scroll count: ${scrollCount}`);
        
        // Check if we've reached the end (no new conversations loaded)
        const newConversationsCount = await page.$$eval('[data-testid="conversation"]', convs => convs.length);
        if (newConversationsCount <= conversations.length && scrollCount > 2) {
            console.log('No new conversations loaded, may have reached the end');
            // Try one more aggressive scroll before giving up
            await page.evaluate(() => {
                window.scrollBy(0, 2000);
            });
            await page.waitForTimeout(2000);
            
            const finalCount = await page.$$eval('[data-testid="conversation"]', convs => convs.length);
            if (finalCount <= newConversationsCount) {
                console.log('Definitely reached the end of conversations');
                reachedEnd = true;
            }
        }
    }
    
    console.log(`Extracted data for ${messages.length} conversations`);
    return messages;
}

runTwitterBot().catch(console.error);


